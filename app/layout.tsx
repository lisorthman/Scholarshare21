import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";
import { AuthProvider } from "@/components/AuthProvider";
const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});
const geistMono = Geist_Mono({
   variable: "--font-geist-mono",
   subsets: ["latin"],
});
export const metadata: Metadata = {
   title: "Create Next App",
   description: "Generated by create next app",
};
export default function RootLayout({
   children,
}: Readonly<{
   children: React.ReactNode;
}>) {
   return (
      <html lang="en">
         <body
            className={`${geistSans.variable} ${geistMono.variable} antialiased`}
       >
         <AuthProvider>
           {children}
         </AuthProvider>
         <script
           dangerouslySetInnerHTML={{
             __html: `
               // Token utility functions for debugging
               window.clearAllTokens = function() {
                 console.log('🧹 Clearing all authentication tokens...');
                 localStorage.removeItem('token');
                 localStorage.removeItem('role');
                 localStorage.removeItem('email');
                 localStorage.removeItem('otpExpiryTime');
                 document.cookie = 'token=; path=/; expires=Thu, 01 Jan 1970 00:00:01 GMT;';
                 document.cookie = 'role=; path=/; expires=Thu, 01 Jan 1970 00:00:01 GMT;';
                 console.log('✅ All tokens cleared!');
                 if (window.location.pathname !== '/signin' && window.location.pathname !== '/signup') {
                   window.location.href = '/signin';
                 }
               };
               
               window.checkTokenStatus = function() {
                 const token = localStorage.getItem('token');
                 console.log('🔍 Token exists:', !!token);
                 if (token) {
                   try {
                     const payload = JSON.parse(atob(token.split('.')[1]));
                     const currentTime = Math.floor(Date.now() / 1000);
                     const isExpired = payload.exp && payload.exp < currentTime;
                     console.log('Token expired:', isExpired);
                     console.log('Expires:', new Date(payload.exp * 1000));
                   } catch (error) {
                     console.log('Error parsing token:', error);
                   }
                 }
               };
               
               console.log('🔧 Token utilities available: clearAllTokens(), checkTokenStatus()');
             `
           }}
         />
      </body>
     </html>
   );
}